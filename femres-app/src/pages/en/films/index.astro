---
import { getCollection } from 'astro:content';
import Layout from '../../../layouts/Layout.astro';
import FilmCard from '../../../components/FilmCard.astro';
import Pagination from '../../../components/Pagination.astro';
import { createT } from '../../../i18n/index';
import { getTopicTranslation, findTopicByName } from '../../../i18n/topicsUtils';

// Set current locale
const currentLocale = 'en';
const t = createT(currentLocale);

const films = await getCollection('films');
// Ëã±ÊñáÁïåÈù¢Âè™ÊòæÁ§∫Â∏¶-enÂêéÁºÄÁöÑÁîµÂΩ±
const publishedFilms = films.filter(film => {
  const isPublished = film.data.status === 'published';
  if (!isPublished) return false;
  return film.slug.endsWith('-en');
});

// ÊåâÂèëÂ∏ÉÊó•ÊúüÊéíÂ∫è
const sortedFilms = publishedFilms.sort((a, b) => {
  return new Date(b.data.releaseDate).getTime() - new Date(a.data.releaseDate).getTime();
});

// Ëé∑ÂèñÊâÄÊúâ‰∏ªÈ¢òÊ†áÁ≠æ
const allTopics = [...new Set(publishedFilms.flatMap(film => film.data.topics))].sort();

// Ëé∑ÂèñÊâÄÊúâÂõΩÂÆ∂/Âú∞Âå∫
const allCountries = [...new Set(publishedFilms.map(film => film.data.country))].sort();

// ÂàÜÈ°µËÆæÁΩÆ
const FILMS_PER_PAGE = 12;
const totalFilms = publishedFilms.length;
const totalPages = Math.ceil(totalFilms / FILMS_PER_PAGE);

// Ëé∑ÂèñÂΩìÂâçÈ°µÁ†Å
const currentPage = Number(Astro.url.searchParams.get('page') || '1');
const validPage = Math.max(1, Math.min(currentPage, totalPages));

// ËÆ°ÁÆóÂΩìÂâçÈ°µÁöÑÁîµÂΩ±
const startIndex = (validPage - 1) * FILMS_PER_PAGE;
const endIndex = startIndex + FILMS_PER_PAGE;
const currentPageFilms = sortedFilms.slice(startIndex, endIndex);
---

<Layout
  title={`${t('nav.films')} - FemRes`}
  description="Curated collection of feminist films exploring gender, power, and social justice through compelling cinema and storytelling."
>
  <div class="min-h-screen bg-gray-50 dark:bg-gray-900">
    <!-- Header -->
    <div class="relative overflow-hidden text-white border-b border-white/20">
      <!-- Gradient Background Layer -->
      <div class="absolute inset-0 bg-gradient-to-r from-purple-600 to-pink-600" style="filter: saturate(1.3) contrast(1.15);"></div>
      <!-- Coarse frosted texture layer -->
      <div class="absolute inset-0 opacity-65" style="background-image: radial-gradient(circle at 1px 1px, rgba(255,255,255,0.5) 1px, transparent 0); background-size: 12px 12px;"></div>
      <!-- Medium frosted texture layer -->
      <div class="absolute inset-0 opacity-45" style="background-image: radial-gradient(circle at 0.8px 0.8px, rgba(255,255,255,0.7) 0.8px, transparent 0); background-size: 6px 6px;"></div>
      <!-- Fine frosted texture layer -->
      <div class="absolute inset-0 opacity-35" style="background-image: radial-gradient(circle at 0.3px 0.3px, rgba(255,255,255,0.8) 0.3px, transparent 0); background-size: 3px 3px;"></div>
      <!-- Keep existing glass overlays -->
      <div class="absolute inset-0 bg-white/10 backdrop-blur-sm"></div>
      <div class="absolute inset-0 bg-[radial-gradient(ellipse_at_top,rgba(255,255,255,0.1),transparent)]"></div>
      <div class="relative z-10">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
          <div class="relative backdrop-blur-sm">
            <div class="text-center">
              <h1 class="text-4xl md:text-5xl font-bold mb-4">
                üé¨ {t('nav.films')}
              </h1>
              <p class="text-xl opacity-90 mb-8 max-w-2xl mx-auto">
                Explore powerful cinema that challenges perspectives and illuminates the feminist experience through storytelling
              </p>

              <!-- ÁªüËÆ°‰ø°ÊÅØ -->
              <div class="flex flex-wrap justify-center gap-6 text-sm">
                <div class="flex items-center bg-white/15 backdrop-blur-md border border-white/20 shadow-lg shadow-black/10 px-4 py-2 rounded-full">
                  <span class="text-white mr-2">üé•</span>
                  <span class="text-white">{totalFilms} films total</span>
                </div>
                <div class="flex items-center bg-white/15 backdrop-blur-md border border-white/20 shadow-lg shadow-black/10 px-4 py-2 rounded-full">
                  <span class="text-white mr-2">üè∑Ô∏è</span>
                  <span class="text-white">{allTopics.length} topic categories</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Main Content -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">

      <!-- ‰∏ªÈ¢òÊ†áÁ≠æÁ≠õÈÄâ -->
      <div class="mb-12">
        <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-6">Topic Categories</h2>
        <div class="relative">
          <div id="topics-container" class="flex flex-wrap gap-3 overflow-hidden transition-all duration-300" style="max-height: 90px;">
            <button
              class="filter-btn inline-flex items-center px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors text-sm font-medium"
              data-filter="all"
            >
              All Films
            </button>
            {allTopics.map(topic => {
              const topicInfo = findTopicByName(topic);
              const translatedTopic = topicInfo
                ? getTopicTranslation(topic, currentLocale as 'zh-CN' | 'en')
                : topic;
              return (
                <button
                  class="filter-btn inline-flex items-center px-4 py-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:border-purple-500 dark:hover:border-purple-400 hover:text-purple-600 dark:hover:text-purple-400 transition-colors text-sm"
                  data-filter={topic}
                >
                  {translatedTopic}
                </button>
              );
            })}
          </div>

          {allTopics.length > 20 && (
            <div class="text-center mt-4">
              <button
                id="toggle-topics"
                class="inline-flex items-center px-4 py-2 text-purple-600 dark:text-purple-400 hover:text-purple-800 dark:hover:text-purple-200 transition-colors text-sm font-medium"
              >
                <span id="toggle-text">Show More</span>
                <svg id="toggle-icon" class="ml-2 w-4 h-4 transform transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </button>
            </div>
          )}
        </div>

        <!-- Country/Region Filter -->
        <div>
          <h2 class="text-xl font-bold text-gray-900 dark:text-white mb-4">Country/Region</h2>
          <div class="flex flex-wrap gap-3">
            <button
              class="country-btn inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm font-medium"
              data-country="all"
            >
              All Regions
            </button>
            {allCountries.map(country => (
              <button
                class="country-btn inline-flex items-center px-4 py-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:border-blue-500 dark:hover:border-blue-400 hover:text-blue-600 dark:hover:text-blue-400 transition-colors text-sm"
                data-country={country}
              >
                {country}
              </button>
            ))}
          </div>
        </div>
      </div>

      <!-- ÁîµÂΩ±ÂàóË°® -->
      <div class="mb-12">
        <div class="flex items-center justify-between mb-8">
          <div>
            <h2 class="text-2xl font-bold text-gray-900 dark:text-white">
              All Films
              <span class="text-base font-normal text-gray-600 dark:text-gray-400 ml-2">
                ({totalFilms} films)
              </span>
            </h2>
          </div>
          <div class="flex items-center gap-4">
            <select id="sort-select" class="px-3 py-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg text-sm text-gray-900 dark:text-white">
              <option value="date-desc">Latest Release</option>
              <option value="date-asc">Earliest Release</option>
              <option value="title-asc">Title A-Z</option>
              <option value="title-desc">Title Z-A</option>
              <option value="year-desc">Year (Newest)</option>
              <option value="year-asc">Year (Oldest)</option>
            </select>
          </div>
        </div>

        <!-- ÁîµÂΩ±ÁΩëÊ†º -->
        <div id="films-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {currentPageFilms.map(film => (
            <div class="film-item" data-topics={film.data.topics.join(',')}>
              <FilmCard
                title={film.data.title}
                director={film.data.director}
                description={film.data.description}
                posterImage={film.data.posterImage}
                releaseDate={film.data.releaseDate}
                slug={film.slug}
                topics={film.data.topics}
                year={film.data.year}
                country={film.data.country}
                duration={film.data.duration}
                genre={film.data.genre}
                locale={currentLocale}
              />
            </div>
          ))}
        </div>

        <!-- ÂàÜÈ°µ -->
        {totalPages > 1 && (
          <div class="flex justify-center mt-12">
            <Pagination
              currentPage={validPage}
              totalPages={totalPages}
              baseUrl="/en/films"
              locale={currentLocale}
            />
          </div>
        )}
      </div>

      <!-- Empty state -->
      {currentPageFilms.length === 0 && (
        <div class="text-center py-16">
          <div class="text-6xl mb-4">üé¨</div>
          <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">
            No film content available
          </h3>
          <p class="text-gray-600 dark:text-gray-400">
            We are working hard to add more high-quality feminist film recommendations
          </p>
        </div>
      )}

      <!-- Viewing Guide -->
      <div class="mt-16 bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 rounded-2xl p-8">
        <div class="text-center">
          <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-4">
            üéûÔ∏è Viewing Guide
          </h2>
          <div class="grid md:grid-cols-3 gap-6 text-left mt-8">
            <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm">
              <div class="text-2xl mb-3">üëÅÔ∏è</div>
              <h3 class="font-semibold text-gray-900 dark:text-white mb-2">Critical Viewing</h3>
              <p class="text-sm text-gray-600 dark:text-gray-400">
                Watch films with a gender perspective, examining character development, narrative approaches, and value transmission
              </p>
            </div>
            <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm">
              <div class="text-2xl mb-3">üí≠</div>
              <h3 class="font-semibold text-gray-900 dark:text-white mb-2">Deep Reflection</h3>
              <p class="text-sm text-gray-600 dark:text-gray-400">
                After viewing, think about the social issues reflected in the film and connect them to real life
              </p>
            </div>
            <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm">
              <div class="text-2xl mb-3">üí¨</div>
              <h3 class="font-semibold text-gray-900 dark:text-white mb-2">Discussion</h3>
              <p class="text-sm text-gray-600 dark:text-gray-400">
                Share your viewing experience with friends and deepen understanding through thoughtful discussion
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    // ‰∏ªÈ¢òÁ≠õÈÄâ„ÄÅÂõΩÂÆ∂Á≠õÈÄâÂíåÊäòÂè†ÂäüËÉΩ
    document.addEventListener('DOMContentLoaded', function() {
      const filterBtns = document.querySelectorAll('.filter-btn');
      const countryBtns = document.querySelectorAll('.country-btn');
      const filmItems = document.querySelectorAll('.film-item');

      let currentTopic = 'all';
      let currentCountry = 'all';

      // ‰∏ªÈ¢òÁ≠õÈÄâÂäüËÉΩ
      filterBtns.forEach(btn => {
        btn.addEventListener('click', function() {
          const filter = this.getAttribute('data-filter');
          currentTopic = filter;

          filterBtns.forEach(b => {
            b.classList.remove('bg-purple-600', 'text-white');
            b.classList.add('bg-white', 'dark:bg-gray-800', 'border', 'border-gray-300', 'dark:border-gray-600', 'text-gray-700', 'dark:text-gray-300');
          });

          this.classList.add('bg-purple-600', 'text-white');
          this.classList.remove('bg-white', 'dark:bg-gray-800', 'border', 'border-gray-300', 'dark:border-gray-600', 'text-gray-700', 'dark:text-gray-300');

          applyFilters();
        });
      });

      // ÂõΩÂÆ∂Á≠õÈÄâÂäüËÉΩ
      countryBtns.forEach(btn => {
        btn.addEventListener('click', function() {
          const country = this.getAttribute('data-country');
          currentCountry = country;

          countryBtns.forEach(b => {
            b.classList.remove('bg-blue-600', 'text-white');
            b.classList.add('bg-white', 'dark:bg-gray-800', 'border', 'border-gray-300', 'dark:border-gray-600', 'text-gray-700', 'dark:text-gray-300');
          });

          this.classList.add('bg-blue-600', 'text-white');
          this.classList.remove('bg-white', 'dark:bg-gray-800', 'border', 'border-gray-300', 'dark:border-gray-600', 'text-gray-700', 'dark:text-gray-300');

          applyFilters();
        });
      });

      // Â∫îÁî®Á≠õÈÄâÊù°‰ª∂
      function applyFilters() {
        filmItems.forEach(item => {
          const itemTopics = item.getAttribute('data-topics').split(',');
          const itemCountry = item.getAttribute('data-country');

          const topicMatch = currentTopic === 'all' || itemTopics.includes(currentTopic);
          const countryMatch = currentCountry === 'all' || itemCountry === currentCountry;

          if (topicMatch && countryMatch) {
            item.style.display = 'block';
          } else {
            item.style.display = 'none';
          }
        });
      }

      // Â±ïÂºÄ/ÊäòÂè†‰∏ªÈ¢òÊ†áÁ≠æ
      const toggleBtn = document.getElementById('toggle-topics');
      const container = document.getElementById('topics-container');
      const toggleText = document.getElementById('toggle-text');
      const toggleIcon = document.getElementById('toggle-icon');

      if (toggleBtn && container) {
        let isExpanded = false;

        toggleBtn.addEventListener('click', function() {
          isExpanded = !isExpanded;

          if (isExpanded) {
            container.style.maxHeight = 'none';
            toggleText.textContent = 'Show Less';
            toggleIcon.style.transform = 'rotate(180deg)';
          } else {
            container.style.maxHeight = '90px';
            toggleText.textContent = 'Show More';
            toggleIcon.style.transform = 'rotate(0deg)';
          }
        });
      }
    });
  </script>
</Layout>