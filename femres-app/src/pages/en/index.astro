---
import Layout from '../../layouts/Layout.astro';
import BookCard from '../../components/BookCard.astro';
import FilmCard from '../../components/FilmCard.astro';
import ArticleCard from '../../components/ArticleCard.astro';
import VideoCard from '../../components/VideoCard.astro';
import PodcastCard from '../../components/PodcastCard.astro';
import PaperCard from '../../components/PaperCard.astro';
import { getCollection } from 'astro:content';
import { createT, getLocalizedPath } from '../../i18n/index';
import topicsMapping from '../../i18n/topicsMapping.json';

// Set current locale
const currentLocale = 'en';
const t = createT(currentLocale);

// Function to get localized topic name
function getLocalizedTopicName(topic: string): string {
  const mapping = topicsMapping[topic as keyof typeof topicsMapping];
  if (mapping) {
    return mapping[currentLocale as 'en' | 'zh-CN'] || topic;
  }
  return topic;
}

// Function to get topic icon
function getTopicIcon(topic: string): string {
  const mapping = topicsMapping[topic as keyof typeof topicsMapping];
  return mapping?.icon || 'üìã';
}

// Ëé∑ÂèñÊâÄÊúâÂÜÖÂÆπ
const books = await getCollection('books');
const films = await getCollection('films');
const articles = await getCollection('articles');
const videos = await getCollection('videos');
const podcasts = await getCollection('podcasts');
const papers = await getCollection('papers');

// Ëã±ÊñáÁïåÈù¢Âè™ÊòæÁ§∫Â∏¶-enÂêéÁºÄ‰∏îÂ∑≤ÂèëÂ∏ÉÁöÑÂÜÖÂÆπ
const filteredBooks = books.filter(book => {
  const isPublished = book.data.status === 'published';
  if (!isPublished) return false;
  return book.slug.endsWith('-en');
});

const filteredArticles = articles.filter(article => {
  const isPublished = article.data.status === 'published';
  if (!isPublished) return false;
  return article.slug.endsWith('-en');
});

const filteredFilms = films.filter(film => {
  const isPublished = film.data.status === 'published';
  if (!isPublished) return false;
  return film.slug.endsWith('-en');
});

const filteredVideos = videos.filter(video => {
  const isPublished = video.data.status === 'published';
  if (!isPublished) return false;
  return video.slug.endsWith('-en');
});

const filteredPodcasts = podcasts.filter(podcast => {
  const isPublished = podcast.data.status === 'published';
  if (!isPublished) return false;
  return podcast.slug.endsWith('-en');
});

const filteredPapers = papers.filter(paper => {
  const isPublished = paper.data.status === 'published';
  if (!isPublished) return false;
  return paper.slug.endsWith('-en');
});

// ÂêàÂπ∂ÊâÄÊúâÂÜÖÂÆπÂπ∂ÊåâÂèëÂ∏ÉÊó∂Èó¥ÊéíÂ∫è
const allContent = [
  ...filteredBooks.map(item => ({ ...item, contentType: 'book' as const })),
  ...filteredFilms.map(item => ({ ...item, contentType: 'film' as const })),
  ...filteredArticles.map(item => ({ ...item, contentType: 'article' as const })),
  ...filteredVideos.map(item => ({ ...item, contentType: 'video' as const })),
  ...filteredPodcasts.map(item => ({ ...item, contentType: 'podcast' as const })),
  ...filteredPapers.map(item => ({ ...item, contentType: 'paper' as const }))
].sort((a, b) => new Date(b.data.releaseDate || b.data.publishDate).getTime() - new Date(a.data.releaseDate || a.data.publishDate).getTime());



// Ëé∑ÂèñÊúÄÊñ∞ÂÜÖÂÆπÔºàÂàÜÁ±ªÂûãÔºâ
const latestBooks = filteredBooks.sort((a, b) => new Date(b.data.publishDate).getTime() - new Date(a.data.publishDate).getTime()).slice(0, 3);
const latestFilms = filteredFilms.sort((a, b) => new Date(b.data.releaseDate).getTime() - new Date(a.data.releaseDate).getTime()).slice(0, 3);
const latestArticles = filteredArticles.sort((a, b) => new Date(b.data.publishDate).getTime() - new Date(a.data.publishDate).getTime()).slice(0, 2);
const latestVideos = filteredVideos.sort((a, b) => new Date(b.data.publishDate).getTime() - new Date(a.data.publishDate).getTime()).slice(0, 2);
const latestPodcasts = filteredPodcasts.sort((a, b) => new Date(b.data.publishDate).getTime() - new Date(a.data.publishDate).getTime()).slice(0, 4);
const latestPapers = filteredPapers.sort((a, b) => new Date(b.data.publishDate).getTime() - new Date(a.data.publishDate).getTime()).slice(0, 3);

// Ëé∑ÂèñÁÉ≠Èó®‰∏ªÈ¢ò
const allTopics = allContent.flatMap(item => item.data.topics);
const topicCounts = allTopics.reduce((acc, topic) => {
  acc[topic] = (acc[topic] || 0) + 1;
  return acc;
}, {} as Record<string, number>);
const popularTopics = Object.entries(topicCounts)
  .sort((a, b) => b[1] - a[1])
  .slice(0, 8);


// ‰∏∫ÊñáÁ´†Ê∑ªÂä†Á±ªÂûãÊ†áËÆ∞Ôºà‰ΩøÁî®ËøáÊª§ÂêéÁöÑÊñáÁ´†Ôºâ
const enrichedArticles = filteredArticles.map(article => {
  let articleType: 'news' | 'blog' | 'research' | 'opinion' | 'analysis' = 'blog';
  if (article.data.title.includes('Report') || article.data.title.includes('Data') || article.data.title.includes('Gender Gap')) {
    articleType = 'analysis';
  } else if (article.data.title.includes('Movement') || article.data.title.includes('MeToo')) {
    articleType = 'news';
  }
  return { ...article, articleType };
});

// Generate localized URLs
const booksLink = getLocalizedPath('books', currentLocale);
const filmsLink = getLocalizedPath('films', currentLocale);
const articlesLink = getLocalizedPath('articles', currentLocale);
const videosLink = getLocalizedPath('videos', currentLocale);
const podcastsLink = getLocalizedPath('podcasts', currentLocale);
const papersLink = getLocalizedPath('papers', currentLocale);
const topicsLink = getLocalizedPath('topics', currentLocale);
const aboutLink = getLocalizedPath('about', currentLocale);
const contributeLink = getLocalizedPath('contribute', currentLocale);
---

<Layout title="FemRes - Feminist Content Aggregation Platform">
  <!-- Full screen Hero Section -->
  <section class="relative min-h-screen flex items-center justify-center overflow-hidden">
    <!-- Background decorative elements -->
    <div class="absolute inset-0 -z-10">
      <div class="absolute top-20 left-10 w-72 h-72 bg-purple-300 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob"></div>
      <div class="absolute top-40 right-10 w-72 h-72 bg-pink-300 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob animation-delay-2000"></div>
      <div class="absolute -bottom-8 left-20 w-72 h-72 bg-indigo-300 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob animation-delay-4000"></div>
    </div>

    <div class="relative text-center px-4 sm:px-6 lg:px-8 max-w-5xl mx-auto w-full">
      <!-- Badge -->
      <div class="inline-flex items-center px-4 py-2 rounded-full bg-purple-100 dark:bg-purple-900 text-purple-800 dark:text-purple-200 text-sm font-medium mb-8">
        <span class="mr-2">üåü</span>
        {t('homepage.hero.badge')}
      </div>

      <!-- Main heading -->
      <h1 class="text-6xl md:text-8xl font-bold text-gray-900 dark:text-white mb-8 leading-tight">
        {t('homepage.hero.title')}
        <span class="text-transparent bg-clip-text bg-gradient-to-r from-purple-600 via-pink-600 to-indigo-600 relative">
          {t('homepage.hero.titleHighlight')}
          <div class="absolute inset-0 bg-gradient-to-r from-purple-600 via-pink-600 to-indigo-600 opacity-20 blur-lg -z-10"></div>
        </span>
        {t('homepage.hero.titleEnd')}
      </h1>

      <!-- Subtitle -->
      <p class="text-xl md:text-2xl text-gray-600 dark:text-gray-300 mb-12 leading-relaxed max-w-3xl mx-auto" set:html={t('homepage.hero.subtitle')}>
      </p>

      <!-- Action buttons -->
      <div class="flex flex-col sm:flex-row gap-4 justify-center items-center mb-16">
        <a
          href="#content-section"
          onclick="const element = document.getElementById('content-section'); const elementPosition = element.offsetTop; const offsetPosition = elementPosition - 80; window.scrollTo({ top: offsetPosition, behavior: 'smooth' }); return false;"
          class="inline-flex items-center justify-center px-8 py-4 text-lg font-semibold rounded-xl text-white bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-200 cursor-pointer"
        >
          {t('homepage.hero.startExploring')}
        </a>
        <a
          href={aboutLink}
          class="inline-flex items-center justify-center px-8 py-4 text-lg font-semibold rounded-xl border-2 border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:border-purple-500 dark:hover:border-purple-400 hover:text-purple-600 dark:hover:text-purple-400 transition-all duration-200"
        >
          {t('homepage.hero.learnMore')}
        </a>
      </div>

      <!-- Key features -->
      <div class="grid grid-cols-1 md:grid-cols-3 gap-8 max-w-4xl mx-auto">
        <div class="text-center">
          <div class="w-16 h-16 bg-purple-100 dark:bg-purple-900 rounded-full flex items-center justify-center mx-auto mb-4">
            <span class="text-2xl">üìö</span>
          </div>
          <h3 class="font-semibold text-gray-900 dark:text-white mb-2">{t('homepage.features.richContent.title')}</h3>
          <p class="text-gray-600 dark:text-gray-400 text-sm">{t('homepage.features.richContent.description')}</p>
        </div>
        <div class="text-center">
          <div class="w-16 h-16 bg-pink-100 dark:bg-pink-900 rounded-full flex items-center justify-center mx-auto mb-4">
            <span class="text-2xl">üîç</span>
          </div>
          <h3 class="font-semibold text-gray-900 dark:text-white mb-2">{t('homepage.features.smartCategories.title')}</h3>
          <p class="text-gray-600 dark:text-gray-400 text-sm">{t('homepage.features.smartCategories.description')}</p>
        </div>
        <div class="text-center">
          <div class="w-16 h-16 bg-indigo-100 dark:bg-indigo-900 rounded-full flex items-center justify-center mx-auto mb-4">
            <span class="text-2xl">üåç</span>
          </div>
          <h3 class="font-semibold text-gray-900 dark:text-white mb-2">{t('homepage.features.globalPerspective.title')}</h3>
          <p class="text-gray-600 dark:text-gray-400 text-sm">{t('homepage.features.globalPerspective.description')}</p>
        </div>
      </div>
    </div>

    <!-- Scroll down indicator -->
    <div
      id="scroll-indicator"
      class="absolute bottom-8 left-1/2 transform -translate-x-1/2 animate-bounce cursor-pointer transition-opacity duration-500"
      onclick="document.getElementById('content-section').scrollIntoView({ behavior: 'smooth' })"
    >
      <div class="flex flex-col items-center text-gray-400 dark:text-gray-500 opacity-70 hover:opacity-100 transition-opacity">
        <!-- Mouse scroll icon -->
        <div class="relative w-6 h-10 border-2 border-current rounded-full mb-2">
          <div class="absolute top-2 left-1/2 transform -translate-x-1/2 w-1 h-2 bg-current rounded-full animate-pulse"></div>
        </div>
        <!-- Small down arrow -->
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7"></path>
        </svg>
      </div>
    </div>
  </section>

  <div id="content-section" class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    <!-- Latest Content Section -->
    <section class="mb-20">
      <div class="text-center mb-16">
        <h2 class="text-4xl md:text-5xl font-bold text-gray-900 dark:text-white mb-4">{t('homepage.sections.featured')}</h2>
        <p class="text-xl text-gray-600 dark:text-gray-300 max-w-2xl mx-auto">Explore the latest feminist thought, research and practice, bringing together quality content from around the world</p>
      </div>

      <!-- Latest Books -->
      {latestBooks.length > 0 && (
        <div class="mb-12">
          <div class="flex items-center justify-between mb-6">
            <h3 class="text-2xl font-semibold text-gray-900 dark:text-white flex items-center">
              <span class="text-3xl mr-3">üìö</span>
              {t('homepage.sections.latestBooks')}
            </h3>
            <a
              href={booksLink}
              class="inline-flex items-center text-purple-600 dark:text-purple-400 hover:text-purple-700 dark:hover:text-purple-300 font-medium text-sm transition-colors"
            >
              {t('common.viewAll')}
              <svg class="ml-1 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </a>
          </div>
          <div class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
            {latestBooks.map(book => (
              <BookCard
                title={book.data.title}
                author={book.data.author}
                description={book.data.description}
                coverImage={book.data.coverImage}
                publishDate={book.data.publishDate}
                slug={book.slug}
                topics={book.data.topics}
                isbn={book.data.isbn}
                locale={currentLocale}
              />
            ))}
          </div>
        </div>
      )}

      <!-- Latest Films -->
      {latestFilms.length > 0 && (
        <div class="mb-12">
          <div class="flex items-center justify-between mb-6">
            <h3 class="text-2xl font-semibold text-gray-900 dark:text-white flex items-center">
              <span class="text-3xl mr-3">üé¨</span>
              {t('homepage.sections.latestFilms')}
            </h3>
            <a
              href={filmsLink}
              class="inline-flex items-center text-purple-600 dark:text-purple-400 hover:text-purple-700 dark:hover:text-purple-300 font-medium text-sm transition-colors"
            >
              {t('common.viewAll')}
              <svg class="ml-1 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </a>
          </div>
          <div class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
            {latestFilms.map(film => (
              <FilmCard
                title={film.data.title}
                director={film.data.director}
                description={film.data.description}
                posterImage={film.data.posterImage}
                releaseDate={film.data.releaseDate}
                slug={film.slug}
                topics={film.data.topics}
                year={film.data.year}
                country={film.data.country}
                duration={film.data.duration}
                genre={film.data.genre}
                locale={currentLocale}
              />
            ))}
          </div>
        </div>
      )}

      <!-- Latest Articles -->
      {latestArticles.length > 0 && (
        <div class="mb-12">
          <div class="flex items-center justify-between mb-6">
            <h3 class="text-2xl font-semibold text-gray-900 dark:text-white flex items-center">
              <span class="text-3xl mr-3">üì∞</span>
              {t('homepage.sections.latestArticles')}
            </h3>
            <a
              href={articlesLink}
              class="inline-flex items-center text-purple-600 dark:text-purple-400 hover:text-purple-700 dark:hover:text-purple-300 font-medium text-sm transition-colors"
            >
              {t('common.viewAll')}
              <svg class="ml-1 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </a>
          </div>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            {enrichedArticles.slice(0, 2).map(article => (
              <ArticleCard
                title={article.data.title}
                author={article.data.author}
                description={article.data.description}
                featuredImage={article.data.featuredImage}
                publishDate={article.data.publishDate}
                readingTime={article.data.readingTime}
                sourceUrl={article.data.sourceUrl}
                slug={article.slug}
                topics={article.data.topics}
                articleType={article.articleType}
                locale={currentLocale}
              />
            ))}
          </div>
        </div>
      )}

      <!-- Latest Videos -->
      {latestVideos.length > 0 && (
        <div class="mb-12">
          <div class="flex items-center justify-between mb-6">
            <h3 class="text-2xl font-semibold text-gray-900 dark:text-white flex items-center">
              <span class="text-3xl mr-3">üé•</span>
              {t('homepage.sections.latestVideos')}
            </h3>
            <a
              href={videosLink}
              class="inline-flex items-center text-purple-600 dark:text-purple-400 hover:text-purple-700 dark:hover:text-purple-300 font-medium text-sm transition-colors"
            >
              {t('common.viewAll')}
              <svg class="ml-1 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </a>
          </div>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            {latestVideos.map(video => (
              <VideoCard
                title={video.data.title}
                author={video.data.author}
                description={video.data.description}
                thumbnail={video.data.thumbnail}
                publishDate={video.data.publishDate}
                duration={video.data.duration}
                sourceUrl={video.data.sourceUrl}
                slug={video.slug}
                topics={video.data.topics}
                locale={currentLocale}
              />
            ))}
          </div>
        </div>
      )}

      <!-- Latest Podcasts -->
      {latestPodcasts.length > 0 && (
        <div class="mb-12">
          <div class="flex items-center justify-between mb-6">
            <h3 class="text-2xl font-semibold text-gray-900 dark:text-white flex items-center">
              <span class="text-3xl mr-3">üéß</span>
              {t('homepage.sections.latestPodcasts')}
            </h3>
            <a
              href={podcastsLink}
              class="inline-flex items-center text-purple-600 dark:text-purple-400 hover:text-purple-700 dark:hover:text-purple-300 font-medium text-sm transition-colors"
            >
              {t('common.viewAll')}
              <svg class="ml-1 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </a>
          </div>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            {latestPodcasts.map(podcast => (
              <PodcastCard
                title={podcast.data.title}
                author={podcast.data.author}
                description={podcast.data.description}
                thumbnail={podcast.data.thumbnail}
                publishDate={podcast.data.publishDate}
                duration={podcast.data.duration}
                sourceUrl={podcast.data.sourceUrl}
                slug={podcast.slug}
                topics={podcast.data.topics}
                episodeNumber={podcast.data.episodeNumber}
                locale={currentLocale}
              />
            ))}
          </div>
        </div>
      )}

      <!-- Latest Papers -->
      {latestPapers.length > 0 && (
        <div class="mb-12">
          <div class="flex items-center justify-between mb-6">
            <h3 class="text-2xl font-semibold text-gray-900 dark:text-white flex items-center">
              <span class="text-3xl mr-3">üìÑ</span>
              {t('homepage.sections.latestPapers')}
            </h3>
            <a
              href={papersLink}
              class="inline-flex items-center text-purple-600 dark:text-purple-400 hover:text-purple-700 dark:hover:text-purple-300 font-medium text-sm transition-colors"
            >
              {t('common.viewAll')}
              <svg class="ml-1 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </a>
          </div>
          <div class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
            {latestPapers.map(paper => (
              <PaperCard
                title={paper.data.title}
                author={paper.data.author}
                description={paper.data.description}
                publishDate={paper.data.publishDate}
                slug={paper.slug}
                topics={paper.data.topics}
                journal={paper.data.journal}
                doi={paper.data.doi}
                citationCount={paper.data.citationCount}
                paperType={paper.data.paperType}
                locale={currentLocale}
              />
            ))}
          </div>
        </div>
      )}
    </section>

    <!-- Featured Topics -->
    <section class="mb-20">
      <div class="text-center mb-12">
        <h2 class="text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-6">{t('homepage.sections.popularTopics')}</h2>
        <p class="text-xl text-gray-600 dark:text-gray-300 max-w-2xl mx-auto">Explore the most discussed feminist topics, understand the current state of development in each field</p>
      </div>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {popularTopics.slice(0, 8).map(([topic, count], index) => {
          const colors = [
            'from-purple-500 to-pink-500',
            'from-pink-500 to-rose-500',
            'from-indigo-500 to-purple-500',
            'from-emerald-500 to-teal-500',
            'from-orange-500 to-red-500',
            'from-blue-500 to-indigo-500',
            'from-teal-500 to-green-500',
            'from-violet-500 to-purple-500'
          ];
          const bgGradient = colors[index % colors.length];

          return (
            <a
              href={getLocalizedPath(`topics/${encodeURIComponent(topic)}`, currentLocale)}
              class="group relative overflow-hidden p-8 bg-white dark:bg-gray-800 rounded-2xl shadow-sm border border-gray-200 dark:border-gray-700 hover:shadow-xl hover:-translate-y-2 transition-all duration-300 text-center"
            >
              <!-- Background gradient on hover -->
              <div class={`absolute inset-0 bg-gradient-to-br ${bgGradient} opacity-0 group-hover:opacity-5 transition-opacity duration-300`}></div>

              <!-- Icon with background -->
              <div class={`relative inline-flex items-center justify-center w-20 h-20 rounded-2xl bg-gradient-to-br ${bgGradient} text-white mb-6 group-hover:scale-110 transition-transform duration-300`}>
                <span class="text-3xl">
                  {getTopicIcon(topic)}
                </span>
              </div>

              <!-- Content -->
              <div class="relative">
                <h3 class="text-xl font-bold text-gray-900 dark:text-white mb-3 group-hover:text-transparent group-hover:bg-clip-text group-hover:bg-gradient-to-r group-hover:from-purple-600 group-hover:to-pink-600 transition-all duration-300">
                  {getLocalizedTopicName(topic)}
                </h3>
                <p class="text-gray-600 dark:text-gray-400 mb-4">
                  {count} featured content
                </p>

                <!-- Progress bar -->
                <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
                  <div class={`h-2 rounded-full bg-gradient-to-r ${bgGradient} transition-all duration-500`}
                       style={`width: ${Math.min(100, (count / Math.max(...popularTopics.map(([, c]) => c))) * 100)}%`}>
                  </div>
                </div>
              </div>

              <!-- Arrow icon -->
              <div class="absolute top-4 right-4 opacity-0 group-hover:opacity-100 transform translate-x-2 group-hover:translate-x-0 transition-all duration-300">
                <svg class="w-6 h-6 text-gray-400 group-hover:text-purple-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
                </svg>
              </div>
            </a>
          );
        })}
      </div>

      <!-- View all topics button -->
      <div class="text-center mt-12">
        <a
          href={topicsLink}
          class="inline-flex items-center px-8 py-4 bg-gradient-to-r from-gray-800 to-gray-900 dark:from-gray-700 dark:to-gray-800 text-white font-semibold rounded-xl hover:shadow-lg hover:-translate-y-1 transition-all duration-200"
        >
          {t('common.viewAll')} {t('nav.topics')}
          <svg class="ml-2 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
          </svg>
        </a>
      </div>
    </section>


    <!-- Call to Action -->
    <section class="text-center py-16 bg-gradient-to-r from-purple-600 to-pink-600 rounded-2xl text-white">
      <div class="max-w-2xl mx-auto px-6">
        <h2 class="text-3xl font-bold mb-4">
          {t('homepage.cta.title')}
        </h2>
        <p class="text-xl mb-8 opacity-90">
          {t('homepage.cta.description')}
        </p>
        <div class="flex flex-col sm:flex-row gap-4 justify-center">
          <a
            href={contributeLink}
            class="inline-flex items-center justify-center px-8 py-3 border border-white/30 text-base font-medium rounded-md text-white bg-white/10 hover:bg-white/20 transition-colors backdrop-blur"
          >
            {t('homepage.cta.contribute')}
          </a>
          <a
            href={aboutLink}
            class="inline-flex items-center justify-center px-8 py-3 border border-white text-base font-medium rounded-md text-purple-600 bg-white hover:bg-gray-50 transition-colors"
          >
            {t('homepage.cta.aboutUs')}
          </a>
        </div>
      </div>
    </section>
  </div>

  <script>
    // Hide scroll indicator when user scrolls
    let hasScrolled = false;
    const scrollIndicator = document.getElementById('scroll-indicator');

    function handleScroll() {
      if (!hasScrolled && window.scrollY > 450) {
        hasScrolled = true;
        if (scrollIndicator) {
          scrollIndicator.style.opacity = '0';
          setTimeout(() => {
            scrollIndicator.style.display = 'none';
          }, 500);
        }
      }
    }

    window.addEventListener('scroll', handleScroll);
  </script>
</Layout>