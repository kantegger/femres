---
import { getCollection } from 'astro:content';
import Layout from '../../../layouts/Layout.astro';
import BookCard from '../../../components/BookCard.astro';
import Pagination from '../../../components/Pagination.astro';
import { createT } from '../../../i18n/index';
import { getTopicTranslation, findTopicByName } from '../../../i18n/topicsUtils';

// Set current locale
const currentLocale = 'en';
const t = createT(currentLocale);

const books = await getCollection('books');

// Ëã±ÊñáÁïåÈù¢Âè™ÊòæÁ§∫Â∏¶-enÂêéÁºÄÁöÑ‰π¶Á±ç
const publishedBooks = books.filter(book => {
  const isPublished = book.data.status === 'published';
  if (!isPublished) return false;

  return book.slug.endsWith('-en');
});

// ÊåâÂèëÂ∏ÉÊó•ÊúüÊéíÂ∫è
const sortedBooks = publishedBooks.sort((a, b) => {
  return new Date(b.data.publishDate).getTime() - new Date(a.data.publishDate).getTime();
});

// Ëé∑ÂèñÊâÄÊúâ‰∏ªÈ¢òÊ†áÁ≠æ
const allTopics = [...new Set(publishedBooks.flatMap(book => book.data.topics))].sort();

// ÂàÜÈ°µËÆæÁΩÆ
const BOOKS_PER_PAGE = 15;
const totalBooks = publishedBooks.length;
const totalPages = Math.ceil(totalBooks / BOOKS_PER_PAGE);

// Ëé∑ÂèñÂΩìÂâçÈ°µÁ†Å (‰ªéURLÂèÇÊï∞Ëé∑ÂèñÔºåÈªòËÆ§‰∏∫1)
const currentPage = Number(Astro.url.searchParams.get('page') || '1');
const validPage = Math.max(1, Math.min(currentPage, totalPages));

// ËÆ°ÁÆóÂΩìÂâçÈ°µÁöÑ‰π¶Á±ç
const startIndex = (validPage - 1) * BOOKS_PER_PAGE;
const endIndex = startIndex + BOOKS_PER_PAGE;
const currentPageBooks = sortedBooks.slice(startIndex, endIndex);

// ÁîüÊàêÈ°µÁ†ÅÊï∞ÁªÑ
const pageNumbers = Array.from({ length: totalPages }, (_, i) => i + 1);

// ÁîüÊàê‰∏≠Èó¥È°µÁ†ÅÊï∞ÁªÑ
const middlePages = pageNumbers.filter(num =>
  num !== 1 &&
  num !== totalPages &&
  Math.abs(num - validPage) <= 1
);
---

<Layout
  title={`${t('nav.books')} - FemRes`}
  description="Selected collection of feminist books covering theory, practice, history and more, providing quality reading resources for feminist learning."
>
  <div class="min-h-screen bg-gray-50 dark:bg-gray-900">
    <!-- Header -->
    <div class="relative overflow-hidden text-white border-b border-white/20">
      <!-- Soft blurred gradient background -->
      <div class="absolute inset-0 bg-gradient-to-r from-emerald-600 to-teal-600 blur-sm scale-110"></div>
      <!-- Secondary softer gradient overlay -->
      <div class="absolute inset-0 bg-gradient-to-br from-emerald-500/80 via-transparent to-teal-500/60"></div>
      <!-- Keep existing glass overlays -->
      <div class="absolute inset-0 bg-white/10 backdrop-blur-sm"></div>
      <div class="absolute inset-0 bg-[radial-gradient(ellipse_at_top,rgba(255,255,255,0.1),transparent)]"></div>
      <div class="relative">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
          <div class="relative backdrop-blur-sm">
            <div class="text-center">
              <h1 class="text-4xl md:text-5xl font-bold mb-4">
                üìö {t('nav.books')}
              </h1>
              <p class="text-xl opacity-90 mb-8 max-w-2xl mx-auto">
                Selected feminist classics and contemporary masterpieces, from theory to practice, providing depth and breadth for thinking
              </p>

              <!-- ÁªüËÆ°‰ø°ÊÅØ -->
              <div class="flex flex-wrap justify-center gap-6 text-sm">
                <div class="flex items-center bg-white/15 backdrop-blur-md border border-white/20 shadow-lg shadow-black/10 px-4 py-2 rounded-full">
                  <span class="text-white mr-2">üìñ</span>
                  <span class="text-white">{totalBooks} books total</span>
                </div>
                <div class="flex items-center bg-white/15 backdrop-blur-md border border-white/20 shadow-lg shadow-black/10 px-4 py-2 rounded-full">
                  <span class="text-white mr-2">üè∑Ô∏è</span>
                  <span class="text-white">{allTopics.length} topic categories</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Main Content -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">

      <!-- ‰∏ªÈ¢òÊ†áÁ≠æÁ≠õÈÄâ -->
      <div class="mb-12">
        <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-6">Topic Categories</h2>
        <div class="relative">
          <!-- ‰∏ªÈ¢òÊ†áÁ≠æÂÆπÂô® -->
          <div id="topics-container" class="flex flex-wrap gap-3 overflow-hidden transition-all duration-300" style="max-height: 90px;">
            <button
              class="filter-btn inline-flex items-center px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors text-sm font-medium"
              data-filter="all"
            >
              All Books
            </button>
            {allTopics.map(topic => {
              const topicInfo = findTopicByName(topic);
              const translatedTopic = topicInfo
                ? getTopicTranslation(topic, currentLocale as 'zh-CN' | 'en')
                : topic;
              return (
                <button
                  class="filter-btn inline-flex items-center px-4 py-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:border-purple-500 dark:hover:border-purple-400 hover:text-purple-600 dark:hover:text-purple-400 transition-colors text-sm"
                  data-filter={topic}
                >
                  {translatedTopic}
                </button>
              );
            })}
          </div>

          <!-- Â±ïÂºÄ/ÊäòÂè†ÊåâÈíÆ - Âè™Âú®ÈúÄË¶ÅÊó∂ÊòæÁ§∫ -->
          {allTopics.length > 20 && (
            <div class="text-center mt-4">
              <button
                id="toggle-topics"
                class="inline-flex items-center px-4 py-2 text-purple-600 dark:text-purple-400 hover:text-purple-800 dark:hover:text-purple-200 transition-colors text-sm font-medium"
              >
                <span id="toggle-text">Show More</span>
                <svg id="toggle-icon" class="ml-2 w-4 h-4 transform transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </button>
            </div>
          )}
        </div>
      </div>

      <!-- ‰π¶Á±çÂàóË°® -->
      <div class="mb-12">
        <div class="flex items-center justify-between mb-8">
          <div>
            <h2 class="text-2xl font-bold text-gray-900 dark:text-white">
              All Books
              <span class="text-base font-normal text-gray-600 dark:text-gray-400 ml-2">
                ({totalBooks} books)
              </span>
            </h2>
          </div>
          <div class="flex items-center gap-4">
            <select id="sort-select" class="px-3 py-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg text-sm text-gray-900 dark:text-white">
              <option value="date-desc">Latest First</option>
              <option value="date-asc">Oldest First</option>
              <option value="title-asc">Title A-Z</option>
              <option value="title-desc">Title Z-A</option>
            </select>
          </div>
        </div>

        <!-- ‰π¶Á±çÁΩëÊ†º -->
        <div id="books-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {currentPageBooks.map(book => (
            <div class="book-item" data-topics={book.data.topics.join(',')}>
              <BookCard
                title={book.data.title}
                titleEn={book.data.titleEn}
                author={book.data.author}
                description={book.data.description}
                descriptionEn={book.data.descriptionEn}
                coverImage={book.data.coverImage}
                publishDate={book.data.publishDate}
                slug={book.slug}
                topics={book.data.topics}
                isbn={book.data.isbn}
                locale={currentLocale}
              />
            </div>
          ))}
        </div>

        <!-- ÂàÜÈ°µ -->
        {totalPages > 1 && (
          <div class="flex justify-center mt-12">
            <Pagination
              currentPage={validPage}
              totalPages={totalPages}
              baseUrl="/en/books"
              locale={currentLocale}
            />
          </div>
        )}
      </div>
    </div>
  </div>

  <script>
    // ‰∏ªÈ¢òÁ≠õÈÄâÂäüËÉΩ
    document.addEventListener('DOMContentLoaded', function() {
      const filterBtns = document.querySelectorAll('.filter-btn');
      const bookItems = document.querySelectorAll('.book-item');

      filterBtns.forEach(btn => {
        btn.addEventListener('click', function() {
          const filter = this.getAttribute('data-filter');

          // Êõ¥Êñ∞ÊåâÈíÆÁä∂ÊÄÅ
          filterBtns.forEach(b => {
            b.classList.remove('bg-purple-600', 'text-white');
            b.classList.add('bg-white', 'dark:bg-gray-800', 'border', 'border-gray-300', 'dark:border-gray-600', 'text-gray-700', 'dark:text-gray-300');
          });

          this.classList.add('bg-purple-600', 'text-white');
          this.classList.remove('bg-white', 'dark:bg-gray-800', 'border', 'border-gray-300', 'dark:border-gray-600', 'text-gray-700', 'dark:text-gray-300');

          // Á≠õÈÄâ‰π¶Á±ç
          bookItems.forEach(item => {
            if (filter === 'all') {
              item.style.display = 'block';
            } else {
              const itemTopics = item.getAttribute('data-topics').split(',');
              if (itemTopics.includes(filter)) {
                item.style.display = 'block';
              } else {
                item.style.display = 'none';
              }
            }
          });
        });
      });

      // Â±ïÂºÄ/ÊäòÂè†‰∏ªÈ¢òÊ†áÁ≠æ
      const toggleBtn = document.getElementById('toggle-topics');
      const container = document.getElementById('topics-container');
      const toggleText = document.getElementById('toggle-text');
      const toggleIcon = document.getElementById('toggle-icon');

      if (toggleBtn && container) {
        let isExpanded = false;

        toggleBtn.addEventListener('click', function() {
          isExpanded = !isExpanded;

          if (isExpanded) {
            container.style.maxHeight = 'none';
            toggleText.textContent = 'Show Less';
            toggleIcon.style.transform = 'rotate(180deg)';
          } else {
            container.style.maxHeight = '90px';
            toggleText.textContent = 'Show More';
            toggleIcon.style.transform = 'rotate(0deg)';
          }
        });
      }
    });
  </script>
</Layout>