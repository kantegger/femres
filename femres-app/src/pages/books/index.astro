---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import BookCard from '../../components/BookCard.astro';
import PageHeader from '../../components/PageHeader.astro';
import { getLocaleFromUrl, createT } from '../../i18n';
import { getTopicTranslation, findTopicByName } from '../../i18n/topicsUtils';

const books = await getCollection('books');

// ‰∏≠ÊñáÁïåÈù¢ÊòæÁ§∫‰∏çÂ∏¶-enÂêéÁºÄÁöÑ‰π¶Á±ç
const publishedBooks = books.filter(book => {
  const isPublished = book.data.status === 'published';
  if (!isPublished) return false;

  return !book.slug.endsWith('-en');
});

const currentLocale = 'zh-CN';
const t = createT(currentLocale);

// ÊåâÂèëÂ∏ÉÊó•ÊúüÊéíÂ∫è
const sortedBooks = publishedBooks.sort((a, b) => {
  return new Date(b.data.publishDate).getTime() - new Date(a.data.publishDate).getTime();
});

// Ëé∑ÂèñÊâÄÊúâ‰∏ªÈ¢òÊ†áÁ≠æ
const allTopics = [...new Set(publishedBooks.flatMap(book => book.data.topics))].sort();

// ÂàÜÈ°µËÆæÁΩÆ
const BOOKS_PER_PAGE = 15;
const totalBooks = publishedBooks.length;
const totalPages = Math.ceil(totalBooks / BOOKS_PER_PAGE);

// Ëé∑ÂèñÂΩìÂâçÈ°µÁ†Å (‰ªéURLÂèÇÊï∞Ëé∑ÂèñÔºåÈªòËÆ§‰∏∫1)
const currentPage = Number(Astro.url.searchParams.get('page') || '1');
const validPage = Math.max(1, Math.min(currentPage, totalPages));

// ËÆ°ÁÆóÂΩìÂâçÈ°µÁöÑ‰π¶Á±ç
const startIndex = (validPage - 1) * BOOKS_PER_PAGE;
const endIndex = startIndex + BOOKS_PER_PAGE;
const currentPageBooks = sortedBooks.slice(startIndex, endIndex);

// ÁîüÊàêÈ°µÁ†ÅÊï∞ÁªÑ
const pageNumbers = Array.from({ length: totalPages }, (_, i) => i + 1);

// ÁîüÊàê‰∏≠Èó¥È°µÁ†ÅÊï∞ÁªÑ
const middlePages = pageNumbers.filter(num => 
  num !== 1 && 
  num !== totalPages && 
  Math.abs(num - validPage) <= 1
);
---

<Layout 
  title="‰π¶Á±ç - FemRes"
  description="Á≤æÈÄâÂ•≥ÊÄß‰∏ª‰πâ‰π¶Á±çÂêàÈõÜÔºåÊ∂µÁõñÁêÜËÆ∫„ÄÅÂÆûË∑µ„ÄÅÂéÜÂè≤Á≠âÂ§ö‰∏™ÊñπÈù¢Ôºå‰∏∫Â•≥ÊÄß‰∏ª‰πâÂ≠¶‰π†Êèê‰æõ‰ºòË¥®ÈòÖËØªËµÑÊ∫ê„ÄÇ"
>
  <div class="min-h-screen bg-gray-50 dark:bg-gray-900">
    <!-- Page Header with Glass Effect -->
    <PageHeader
      title="üìö ‰π¶Á±çÊé®Ëçê"
      description="Á≤æÈÄâÂ•≥ÊÄß‰∏ª‰πâÁªèÂÖ∏‰∏éÂΩì‰ª£‰Ω≥‰ΩúÔºå‰ªéÁêÜËÆ∫Âà∞ÂÆûË∑µÔºå‰∏∫ÊÄùËÄÉÊèê‰æõÊ∑±Â∫¶‰∏éÂπøÂ∫¶"
      gradient="emerald"
      stats={[
        { icon: "üìñ", text: `ÂÖ± ${totalBooks} Êú¨‰π¶Á±ç` },
        { icon: "üè∑Ô∏è", text: `${allTopics.length} ‰∏™‰∏ªÈ¢òÂàÜÁ±ª` }
      ]}
    />

    <!-- Main Content -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
      
      <!-- ‰∏ªÈ¢òÊ†áÁ≠æÁ≠õÈÄâ -->
      <div class="mb-12">
        <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-6">‰∏ªÈ¢òÂàÜÁ±ª</h2>
        <div class="relative">
          <!-- ‰∏ªÈ¢òÊ†áÁ≠æÂÆπÂô® -->
          <div id="topics-container" class="flex flex-wrap gap-3 overflow-hidden transition-all duration-300" style="max-height: 90px;">
            <button 
              class="filter-btn inline-flex items-center px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors text-sm font-medium"
              data-filter="all"
            >
              ÂÖ®ÈÉ®‰π¶Á±ç
            </button>
            {allTopics.map(topic => {
              const topicInfo = findTopicByName(topic);
              const translatedTopic = topicInfo
                ? getTopicTranslation(topic, currentLocale as 'zh-CN' | 'en')
                : topic;
              return (
                <button
                  class="filter-btn inline-flex items-center px-4 py-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:border-purple-500 dark:hover:border-purple-400 hover:text-purple-600 dark:hover:text-purple-400 transition-colors text-sm"
                  data-filter={topic}
                >
                  {translatedTopic}
                </button>
              );
            })}
          </div>
          
          <!-- Â±ïÂºÄ/ÊäòÂè†ÊåâÈíÆ - Âè™Âú®ÈúÄË¶ÅÊó∂ÊòæÁ§∫ -->
          {allTopics.length > 20 && (
            <div class="flex justify-center mt-4">
              <button 
                id="toggle-topics-btn"
                class="inline-flex items-center px-4 py-2 bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 text-gray-600 dark:text-gray-400 rounded-lg transition-colors text-sm font-medium"
              >
                <span id="toggle-topics-text">Â±ïÂºÄÊõ¥Â§ö‰∏ªÈ¢ò</span>
                <svg id="toggle-topics-icon" class="ml-2 w-4 h-4 transform transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </button>
            </div>
          )}
        </div>
      </div>

      <!-- ‰π¶Á±çÁΩëÊ†º -->
      <div class="mb-8">
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-2xl font-bold text-gray-900 dark:text-white">
            <span id="current-filter">ÂÖ®ÈÉ®‰π¶Á±ç</span>
            <span id="book-count" class="text-base font-normal text-gray-600 dark:text-gray-400 ml-2">
              ({totalBooks} Êú¨)
            </span>
          </h2>
          <div class="flex items-center gap-4">
            <select id="sort-select" class="px-3 py-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg text-sm text-gray-900 dark:text-white">
              <option value="date-desc">ÊúÄÊñ∞ÂèëÂ∏É</option>
              <option value="date-asc">ÊúÄÊó©ÂèëÂ∏É</option>
              <option value="title-asc">Ê†áÈ¢ò A-Z</option>
              <option value="title-desc">Ê†áÈ¢ò Z-A</option>
            </select>
          </div>
        </div>
        
        <div id="books-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {currentPageBooks.map(book => (
            <div class="book-item" data-topics={JSON.stringify(book.data.topics)} data-title={book.data.title} data-date={book.data.publishDate.toISOString()}>
              <BookCard 
                title={book.data.title}
                author={book.data.author}
                description={book.data.description}
                slug={book.slug}
                coverImage={book.data.coverImage}
                publishDate={book.data.publishDate}
                topics={book.data.topics}
                isbn={book.data.isbn}
              />
            </div>
          ))}
        </div>
        
        <!-- ÂàÜÈ°µÁªÑ‰ª∂ -->
        {totalPages > 1 && (
          <div class="mt-12 flex justify-center">
            <nav class="flex items-center space-x-2" aria-label="ÂàÜÈ°µÂØºËà™">
              <!-- ‰∏ä‰∏ÄÈ°µÊåâÈíÆ -->
              {validPage > 1 ? (
                <a 
                  href={`/books?page=${validPage - 1}`}
                  class="px-3 py-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
                  aria-label="‰∏ä‰∏ÄÈ°µ"
                >
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                  </svg>
                </a>
              ) : (
                <span class="px-3 py-2 bg-gray-100 dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-lg opacity-50 cursor-not-allowed">
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                  </svg>
                </span>
              )}
              
              <!-- È°µÁ†ÅÊåâÈíÆ -->
              <div class="flex items-center space-x-2">
                {/* Á¨¨‰∏ÄÈ°µ */}
                {validPage === 1 ? (
                  <span class="px-4 py-2 bg-purple-600 text-white rounded-lg font-medium">1</span>
                ) : (
                  <a href="/books?page=1" class="px-4 py-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors">1</a>
                )}
                
                {/* Â∑¶‰æßÁúÅÁï•Âè∑ */}
                {validPage > 3 && <span class="px-2 text-gray-500">...</span>}
                
                {/* ‰∏≠Èó¥È°µÁ†Å */}
                {middlePages.map(pageNum => 
                  pageNum === validPage ? (
                    <span class="px-4 py-2 bg-purple-600 text-white rounded-lg font-medium">
                      {pageNum}
                    </span>
                  ) : (
                    <a 
                      href={`/books?page=${pageNum}`}
                      class="px-4 py-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
                    >
                      {pageNum}
                    </a>
                  )
                )}
                
                {/* Âè≥‰æßÁúÅÁï•Âè∑ */}
                {validPage < totalPages - 2 && <span class="px-2 text-gray-500">...</span>}
                
                {/* ÊúÄÂêé‰∏ÄÈ°µ */}
                {totalPages > 1 && (
                  validPage === totalPages ? (
                    <span class="px-4 py-2 bg-purple-600 text-white rounded-lg font-medium">{totalPages}</span>
                  ) : (
                    <a href={`/books?page=${totalPages}`} class="px-4 py-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors">{totalPages}</a>
                  )
                )}
              </div>
              
              <!-- ‰∏ã‰∏ÄÈ°µÊåâÈíÆ -->
              {validPage < totalPages ? (
                <a 
                  href={`/books?page=${validPage + 1}`}
                  class="px-3 py-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
                  aria-label="‰∏ã‰∏ÄÈ°µ"
                >
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                  </svg>
                </a>
              ) : (
                <span class="px-3 py-2 bg-gray-100 dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-lg opacity-50 cursor-not-allowed">
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                  </svg>
                </span>
              )}
            </nav>
            
          </div>
        )}
      </div>

      <!-- Á©∫Áä∂ÊÄÅ -->
      {sortedBooks.length === 0 && (
        <div class="text-center py-16">
          <div class="text-6xl mb-4">üìö</div>
          <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">
            ÊöÇÊó†‰π¶Á±çÂÜÖÂÆπ
          </h3>
          <p class="text-gray-600 dark:text-gray-400">
            Êàë‰ª¨Ê≠£Âú®Âä™ÂäõÊ∑ªÂä†Êõ¥Â§ö‰ºòË¥®ÁöÑÂ•≥ÊÄß‰∏ª‰πâ‰π¶Á±çÊé®Ëçê
          </p>
        </div>
      )}

      <!-- Êé®ËçêÈòÖËØªÊåáÂçó -->
      <div class="mt-16 bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 rounded-2xl p-8">
        <div class="text-center">
          <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-4">
            üìñ ÈòÖËØªÂª∫ËÆÆ
          </h2>
          <div class="grid md:grid-cols-3 gap-6 text-left mt-8">
            <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm">
              <div class="text-2xl mb-3">üåü</div>
              <h3 class="font-semibold text-gray-900 dark:text-white mb-2">Êñ∞ÊâãÂÖ•Èó®</h3>
              <p class="text-sm text-gray-600 dark:text-gray-400">
                Âª∫ËÆÆ‰ªéÁªèÂÖ∏‰ª£Ë°®‰ΩúÂìÅÂºÄÂßãÔºåÂ¶Ç„ÄäÁ¨¨‰∫åÊÄß„Äã„ÄÅ„ÄäÊàë‰ª¨ÈÉΩÂ∫îËØ•ÊòØÂ•≥ÊÄß‰∏ª‰πâËÄÖ„ÄãÁ≠â
              </p>
            </div>
            <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm">
              <div class="text-2xl mb-3">üìö</div>
              <h3 class="font-semibold text-gray-900 dark:text-white mb-2">Ê∑±Â∫¶ÈòÖËØª</h3>
              <p class="text-sm text-gray-600 dark:text-gray-400">
                ÂèØÊåâ‰∏ªÈ¢òÂàÜÁ±ªËøõË°åÁ≥ªÁªüÊÄßÈòÖËØªÔºå‰ªéÁêÜËÆ∫Âü∫Á°ÄÂà∞ÂÆûË∑µÂ∫îÁî®ÈÄêÊ≠•Ê∑±ÂÖ•
              </p>
            </div>
            <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm">
              <div class="text-2xl mb-3">üí°</div>
              <h3 class="font-semibold text-gray-900 dark:text-white mb-2">ÊÄùËÄÉËÆ®ËÆ∫</h3>
              <p class="text-sm text-gray-600 dark:text-gray-400">
                ÈòÖËØªÂêéÂèØÊü•ÁúãËØ¶ÁªÜÂÜÖÂÆπÈ°µÈù¢Ôºå‰∫ÜËß£Ê†∏ÂøÉËßÇÁÇπÔºåÁªìÂêàÁé∞ÂÆûËøõË°åÊÄùËÄÉ
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const filterButtons = document.querySelectorAll('.filter-btn');
    const sortSelect = document.getElementById('sort-select');
    const booksGrid = document.getElementById('books-grid');
    const currentFilter = document.getElementById('current-filter');
    const bookCount = document.getElementById('book-count');
    
    // ‰∏ªÈ¢òÂ±ïÂºÄ/ÊäòÂè†ÂäüËÉΩ
    const topicsContainer = document.getElementById('topics-container');
    const toggleBtn = document.getElementById('toggle-topics-btn');
    const toggleText = document.getElementById('toggle-topics-text');
    const toggleIcon = document.getElementById('toggle-topics-icon');
    let isTopicsExpanded = false;
    
    // Âè™Âú®ÊåâÈíÆÂ≠òÂú®Êó∂Ê∑ªÂä†‰∫ã‰ª∂ÁõëÂê¨Âô®
    if (toggleBtn) {
      toggleBtn.addEventListener('click', function() {
        if (isTopicsExpanded) {
          // ÊäòÂè†‰∏ªÈ¢ò
          topicsContainer.style.maxHeight = '90px'; // Á∫¶2Ë°åÈ´òÂ∫¶
          toggleText.textContent = 'Â±ïÂºÄÊõ¥Â§ö‰∏ªÈ¢ò';
          toggleIcon.style.transform = 'rotate(0deg)';
          isTopicsExpanded = false;
        } else {
          // Â±ïÂºÄ‰∏ªÈ¢ò
          topicsContainer.style.maxHeight = 'none';
          toggleText.textContent = 'Êî∂Ëµ∑‰∏ªÈ¢ò';
          toggleIcon.style.transform = 'rotate(180deg)';
          isTopicsExpanded = true;
        }
      });
    }
    
    let currentTopic = 'all';
    const BOOKS_PER_PAGE = 15;
    let currentPage = 1;
    let allBookItems = [];
    
    // ‰øùÂ≠òÊâÄÊúâ‰π¶Á±çÈ°πÁõÆ
    allBookItems = Array.from(document.querySelectorAll('.book-item')).map(item => {
      return {
        element: item.cloneNode(true),
        topics: JSON.parse(item.dataset.topics),
        title: item.dataset.title,
        date: item.dataset.date
      };
    });
    
    // Á≠õÈÄâÂäüËÉΩ
    filterButtons.forEach(button => {
      button.addEventListener('click', function() {
        const filterValue = this.dataset.filter;
        currentTopic = filterValue;
        currentPage = 1; // ÈáçÁΩÆÂà∞Á¨¨‰∏ÄÈ°µ
        
        // Êõ¥Êñ∞ÊåâÈíÆÊ†∑Âºè
        filterButtons.forEach(btn => {
          btn.classList.remove('bg-purple-600', 'text-white');
          btn.classList.add('bg-white', 'dark:bg-gray-800', 'border', 'border-gray-300', 'dark:border-gray-600', 'text-gray-700', 'dark:text-gray-300');
        });
        
        this.classList.remove('bg-white', 'dark:bg-gray-800', 'border', 'border-gray-300', 'dark:border-gray-600', 'text-gray-700', 'dark:text-gray-300');
        this.classList.add('bg-purple-600', 'text-white');
        
        // Êõ¥Êñ∞Ê†áÈ¢ò
        currentFilter.textContent = filterValue === 'all' ? 'ÂÖ®ÈÉ®‰π¶Á±ç' : filterValue;
        
        // ÊâßË°åÁ≠õÈÄâ
        filterAndSort();
      });
    });
    
    // ÊéíÂ∫èÂäüËÉΩ
    sortSelect.addEventListener('change', function() {
      currentPage = 1; // ÈáçÁΩÆÂà∞Á¨¨‰∏ÄÈ°µ
      filterAndSort();
    });
    
    function filterAndSort() {
      const sortValue = sortSelect.value;
      
      // Á≠õÈÄâ
      let filteredBooks = allBookItems.filter(item => {
        if (currentTopic === 'all') return true;
        return item.topics.includes(currentTopic);
      });
      
      // ÊéíÂ∫è
      filteredBooks.sort((a, b) => {
        switch (sortValue) {
          case 'date-desc':
            return new Date(b.date).getTime() - new Date(a.date).getTime();
          case 'date-asc':
            return new Date(a.date).getTime() - new Date(b.date).getTime();
          case 'title-asc':
            return a.title.localeCompare(b.title);
          case 'title-desc':
            return b.title.localeCompare(a.title);
          default:
            return 0;
        }
      });
      
      // Ê∏ÖÁ©∫ÁΩëÊ†º
      booksGrid.innerHTML = '';
      
      // ËÆ°ÁÆóÂàÜÈ°µ
      const totalFiltered = filteredBooks.length;
      const totalPages = Math.ceil(totalFiltered / BOOKS_PER_PAGE);
      const startIndex = (currentPage - 1) * BOOKS_PER_PAGE;
      const endIndex = startIndex + BOOKS_PER_PAGE;
      const currentPageBooks = filteredBooks.slice(startIndex, endIndex);
      
      // ÊòæÁ§∫ÂΩìÂâçÈ°µÁöÑ‰π¶Á±ç
      currentPageBooks.forEach(item => {
        booksGrid.appendChild(item.element.cloneNode(true));
      });
      
      // Êõ¥Êñ∞ËÆ°Êï∞
      bookCount.textContent = `(${totalFiltered} Êú¨)`;
      
      // ÂàõÂª∫ÊàñÊõ¥Êñ∞ÂàÜÈ°µÊéß‰ª∂
      updatePagination(totalPages, totalFiltered);
      
      // Â¶ÇÊûúÊ≤°ÊúâÁªìÊûúÔºåÊòæÁ§∫Á©∫Áä∂ÊÄÅ
      if (filteredBooks.length === 0) {
        const emptyDiv = document.createElement('div');
        emptyDiv.id = 'empty-state';
        emptyDiv.className = 'col-span-full text-center py-16';
        emptyDiv.innerHTML = `
          <div class="text-6xl mb-6">üìö</div>
          <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-4">
            ÊöÇÊó†Áõ∏ÂÖ≥‰π¶Á±ç
          </h3>
          <p class="text-gray-600 dark:text-gray-400">
            ËØ•‰∏ªÈ¢ò‰∏ãÊöÇÊó†‰π¶Á±çÔºåËØïËØïÂÖ∂‰ªñ‰∏ªÈ¢òÊàñÊü•ÁúãÂÖ®ÈÉ®‰π¶Á±ç
          </p>
        `;
        booksGrid.appendChild(emptyDiv);
      }
    }
    
    function updatePagination(totalPages, totalItems) {
      // ÁßªÈô§Áé∞ÊúâÁöÑÂàÜÈ°µÊéß‰ª∂ÔºàÂ¶ÇÊûúÊòØÈÄöËøáÁ≠õÈÄâÂàõÂª∫ÁöÑÔºâ
      const existingPagination = document.getElementById('filter-pagination');
      if (existingPagination) {
        existingPagination.remove();
      }
      
      // Â¶ÇÊûúÊÄªÈ°µÊï∞Â§ß‰∫é1ÔºåÊ∑ªÂä†ÂàÜÈ°µÊéß‰ª∂
      if (totalPages > 1) {
        const paginationHTML = `
          <div id="filter-pagination" class="mt-12 flex justify-center">
            <nav class="flex items-center space-x-2" aria-label="ÂàÜÈ°µÂØºËà™">
              <!-- ‰∏ä‰∏ÄÈ°µÊåâÈíÆ -->
              <button 
                class="pagination-prev px-3 py-2 ${currentPage > 1 ? 'bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700' : 'bg-gray-100 dark:bg-gray-900 border border-gray-200 dark:border-gray-700 opacity-50 cursor-not-allowed'} rounded-lg transition-colors"
                ${currentPage <= 1 ? 'disabled' : ''}
              >
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
              </button>
              
              <!-- È°µÁ†ÅÊåâÈíÆ -->
              <div class="flex items-center space-x-2" id="page-numbers">
                ${generatePageNumbers(totalPages)}
              </div>
              
              <!-- ‰∏ã‰∏ÄÈ°µÊåâÈíÆ -->
              <button 
                class="pagination-next px-3 py-2 ${currentPage < totalPages ? 'bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700' : 'bg-gray-100 dark:bg-gray-900 border border-gray-200 dark:border-gray-700 opacity-50 cursor-not-allowed'} rounded-lg transition-colors"
                ${currentPage >= totalPages ? 'disabled' : ''}
              >
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
              </button>
            </nav>
            
          </div>
        `;
        
        booksGrid.insertAdjacentHTML('afterend', paginationHTML);
        
        // Ê∑ªÂä†ÂàÜÈ°µ‰∫ã‰ª∂ÁõëÂê¨Âô®
        document.querySelector('.pagination-prev')?.addEventListener('click', () => {
          if (currentPage > 1) {
            currentPage--;
            filterAndSort();
          }
        });
        
        document.querySelector('.pagination-next')?.addEventListener('click', () => {
          if (currentPage < totalPages) {
            currentPage++;
            filterAndSort();
          }
        });
        
        document.querySelectorAll('.page-number').forEach(btn => {
          btn.addEventListener('click', function() {
            currentPage = parseInt(this.dataset.page);
            filterAndSort();
          });
        });
      }
    }
    
    function generatePageNumbers(totalPages) {
      let html = '';
      for (let i = 1; i <= totalPages; i++) {
        // ÊòæÁ§∫ÈÄªËæëÔºöÁ¨¨‰∏ÄÈ°µ„ÄÅÊúÄÂêé‰∏ÄÈ°µ„ÄÅÂΩìÂâçÈ°µÂèäÂÖ∂ÂâçÂêéÈ°µ
        const showPage = i === 1 || 
                        i === totalPages || 
                        Math.abs(i - currentPage) <= 1;
        
        if (showPage) {
          if (i === currentPage) {
            html += `<span class="px-4 py-2 bg-purple-600 text-white rounded-lg font-medium">${i}</span>`;
          } else {
            html += `<button class="page-number px-4 py-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors" data-page="${i}">${i}</button>`;
          }
        } else if (i === 2 && currentPage > 4) {
          html += `<span class="px-2 text-gray-500">...</span>`;
        } else if (i === totalPages - 1 && currentPage < totalPages - 3) {
          html += `<span class="px-2 text-gray-500">...</span>`;
        }
      }
      return html;
    }
  });
</script>